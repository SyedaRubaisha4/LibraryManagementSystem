@model Models.DTOModel.UserViewModel
<div class="  " >
    @if (TempData["EmailError"] != null)
    {

        <div class="position-fixed mt-5 start-50 translate-middle">
            <div class="toast d-flex" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto text-danger">Error</strong>
                </div>
                <div class="toast-body text-danger">
                    @TempData["EmailError"]
                </div>
            </div>
        </div>

    }
    @if (TempData["EmailSend"] != null)
    {

        <div class="position-fixed mt-5 start-50 translate-middle">
            <div class="toast d-flex" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto text-success">Alert</strong>
                </div>
                <div class="toast-body text-success">
                    @TempData["EmailSend"]
                </div>
            </div>
        </div>

    }
    @if (TempData["SuccessMessage"] != null)
    {

        <div class="position-fixed mt-5 start-50 translate-middle">
            <div class="toast d-flex" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto text-success">Alert</strong>
                </div>
                <div class="toast-body text-success">
                    @TempData["SuccessMessage"]
                </div>
            </div>
        </div>

    }
    @if (TempData["EmailSendError"] != null)
    {

        <div class="position-fixed mt-5 start-50 translate-middle">
            <div class="toast d-flex" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto text-success">Alert</strong>
                </div>
                <div class="toast-body text-success">
                    @TempData["EmailSendError"]
                </div>
            </div>
        </div>

    }
    <div class="row ">
        <div id="toastContainer" class=" bottom-0 end-0 p-3" style="z-index: 11;"></div>
        <div class="d-flex col-xl-12  justify-content-between">
            <div id="spinner" class="d-none bg-white position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center">
                <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </div>
            <div>

                <h2 class="">All Users </h2>
            </div>
            <div>

              
                <button type="button" class="btn btn-primary me-2" style="border-radius:15px;background-color:darkblue" id="btnRemainder">
                    <i class="bi bi-envelope-arrow-up me-1"></i>Remainder
              
                </button>
                <button type="button" class="btn  me-2" style="border-radius:15px;background-color:lightpink;color:black" id="btnFine">
                    <i class="bi bi-cash me-1"></i>   Fine Remainder
                </button>
                <button type="button" class="btn btn-primary" style="border-radius:15px;background-color:darkblue" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                    <i class="bi bi-person-add me-1"></i>   Add User
                </button>
                <div class="modal fade" id="staticBackdrop"  data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h1 class="modal-title" id="staticBackdropLabel">AddUser</h1>
                                <button type="button" class="btn-close me-5" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body text-black">
                                <form method="post"
                                      asp-action="@((Model.User?.Id == null || Model.User?.Id == 0) ? "Add" : "Update")"
                                      asp-controller="User"
                                      class="needs-validation" novalidate id="userForm" enctype="multipart/form-data">

                                    <div class="bg-light rounded p-4 p-sm-5 my-4 mx-3">
                                        <div class="d-flex align-items-center justify-content-between mb-3"></div>
                                        <input type="hidden" name="Id" value="@Model.User?.Id" />
                                        <div class="form-floating mb-3">
                                            <input type="text" class="form-control" name="FirstName" value="@Model.User.FirstName" placeholder="FirstName" required>
                                            <label for="floatingInput">First Name</label>
                                            <div class="invalid-feedback">First name is required.</div>
                                        </div>

                                        <div class="form-floating mb-3">
                                            <input type="text" class="form-control" name="LastName" value="@Model.User.LastName" placeholder="LastName" required>
                                            <label for="floatingInput">Last Name</label>
                                            <div class="invalid-feedback">Last name is required.</div>
                                        </div>

                                        <div class="form-floating mb-4">
                                            <input type="number" class="form-control" name="Age" value="@Model.User.Age" placeholder="Age" required min="18" max="100">
                                            <label for="floatingInput">Age</label>
                                            <div class="invalid-feedback">Age must be between 18 and 100.</div>
                                        </div>
                                        <div class="form-floating mb-4">
                                            <input type="file" class="form-control" name="Image" accept="image/*" value="@Model.User.Image" placeholder="Image">
                                            <label for="floatingInput">Profile Image</label>

                                        </div>
                                        <div class="form-floating mb-4">
                                            <input type="date"
                                                   class="form-control"
                                                   name="DateOfBirth"
                                                   id="dateBirth"
                                                   value="@Model.User.DateOfBirth"
                                                   placeholder="Date of Birth"
                                                   required>
                                            <label for="dateBirth">Date of Birth</label>
                                            <div class="invalid-feedback">Date of birth is required.</div>
                                        </div>

                                        <div class="form-floating mb-4">
                                            <input type="text" class="form-control" name="Gender" value="@Model.User.Gender" placeholder="Gender" required>
                                            <label for="floatingInput">Gender</label>
                                            <div class="invalid-feedback">Gender is required.</div>
                                        </div>

                                        <div class="form-floating mb-4">
                                            <input type="password" class="form-control" name="Password" value="@Model.User.Password" placeholder="Password" required minlength="6">
                                            <label for="floatingInput">Password</label>
                                            <div class="invalid-feedback">Password is required and must be at least 6 characters.</div>
                                        </div>

                                        <div class="form-floating mb-4">
                                            <input type="email"
                                                   class="form-control"
                                                   id="emailInput"
                                                   name="Email"
                                                   value="@Model.User.Email"
                                                   placeholder="Email"
                                                   required>
                                            <label for="emailInput">Email</label>
                                            <div class="invalid-feedback" id="emailFeedback" style="display: none;">A valid email is required.</div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" id="submitBtn">
                                    Submit
                                </button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

        </div>
        <div class="col-sm-12 col-xl-12 col-lg-12 col-md-12">
            <div class="bg-light rounded h-100 ">
                <div class="table-responsive">
                <table class="table table-striped table-responsive">
                    <thead>
                        <tr>

                            <td style=" text-align: right; " colspan="10">
                                <form method="get" asp-action="AddUser" asp-controller="User" id="searchForm" class="d-flex justify-content-end">
                                    <input type="text" name="searchQuery" id="searchBox" class="form-control me-1" placeholder="Search..." style="width: 20%;" value="@ViewBag.SearchQuery">
                                    <button type="submit" class="btn " style="border-radius:60%;background-color:lightpink;opacity:0.7"><i class="bi bi-search text-black"></i></button>
                                </form>
                            </td>
                        </tr>

                        <tr>
                            <th scope="col">Image</th>

                            <th scope="col">
                                    <a asp-action="AddUser" class="text-secondary" asp-route-sortBy="FirstName" asp-route-isAscending="@(ViewBag.SortBy == "FirstName" ? !ViewBag.IsAscending : true)" style="display: inline-flex; align-items: center; white-space: nowrap;text-decoration:none;color:black">
                                    First Name
                                    @if (ViewBag.SortBy == "FirstName")
                                    {
                                        <i class="bi @(ViewBag.IsAscending ? "bi-arrow-up" : "bi-arrow-down")" style="margin-left: 5px; vertical-align: middle;"></i>
                                    }
                                </a>
                            </th>

                            <th scope="col">
                                    <a asp-action="AddUser" class="text-secondary" asp-route-sortBy="LastName" asp-route-isAscending="@(ViewBag.SortBy == "LastName" ? !ViewBag.IsAscending : true)" style="display: inline-flex; align-items: center; white-space: nowrap;text-decoration:none;color:black">
                                    Last Name
                                    @if (ViewBag.SortBy == "LastName")
                                    {
                                        <i class="bi @(ViewBag.IsAscending ? "bi-arrow-up" : "bi-arrow-down")" style="margin-left: 5px; vertical-align: middle;"></i>
                                    }
                                </a>
                            </th>

                            <th scope="col">
                                    <a asp-action="AddUser" class="text-secondary" asp-route-sortBy="Age" asp-route-isAscending="@(ViewBag.SortBy == "Age" ? !ViewBag.IsAscending : true)" style="display: inline-flex; align-items: center; white-space: nowrap;text-decoration:none;color:black">
                                    Age
                                    @if (ViewBag.SortBy == "Age")
                                    {
                                        <i class="bi @(ViewBag.IsAscending ? "bi-arrow-up" : "bi-arrow-down")" style="margin-left: 5px; vertical-align: middle;"></i>
                                    }
                                </a>
                            </th>

                            <th scope="col">BirthDate</th>
                            <th scope="col">Password</th>
                            <th scope="col">Email</th>
                            <th scope="col">Status</th>
                            <th scope="col">Roll</th>
                            <th scope="col">Actions</th>
                        </tr>



                    </thead>

                    <tbody>
                        @foreach (var item in Model.Users)
                        {
                            <tr>
                                <td>
                                    <a href="@Url.Content(item.ProfileImage == null ? "/image/download.jpeg" : "/image/" + item.ProfileImage)" target="_blank">
                                        <img src="@Url.Content(item.ProfileImage == null ? "/image/download.jpeg" : "/image/" + item.ProfileImage)"
                                             width="50" height="50" />
                                    </a>
                                </td>
                                <td>@item.FirstName</td>
                                <td>@item.LastName</td>
                                <td>@item.Age</td>
                                <td>@item.DateOfBirth.ToString("yyyy-MM-dd")</td>
                                <td>@item.Password</td>
                                <td>@item.Email</td>
                                <td>@item.Status</td>
                                <td>@item.Roll</td>
                                <td >
                                        <div class="d-inline-flex">
                                            <button type="button" class="btn text-light" style="background-color:darkblue" data-bs-toggle="modal"
                                            data-bs-target="#exampleModal-@item.Id"
                                            onclick="setUsersId(@item.Id)">
                                        <i class="bi bi-pencil text-light"></i>
                                    </button>


                                    <div class="modal fade" id="exampleModal-@item.Id" data-bs-keyboard="false"
                                         tabindex="-1" aria-labelledby="exampleModalLabel-@item.Id" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h1 class="modal-title fs-5" id="exampleModalLabel-@item.Id">Update User</h1>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body text-black">
                                                    <form method="post"
                                                          asp-action="Update" asp-controller="User" class="needs-validation" enctype="multipart/form-data" novalidate>

                                                        <div class="bg-light rounded p-4 p-sm-5 my-4 mx-3">
                                                            <div class="d-flex align-items-center justify-content-between mb-3">
                                                            </div>
                                                            <div class="form-floating mb-3">
                                                                <input type="text" class="form-control" name="FirstName" id="FirstName" placeholder="FirstName" required>
                                                                <label for="floatingInput">First Name</label>


                                                                <div class="invalid-feedback">First name is required.</div>
                                                            </div>
                                                            <input type="hidden" name="Id" value="@item.Id" />


                                                            <div class="form-floating mb-3">
                                                                <input type="text" class="form-control" name="LastName" id="LastName" placeholder="LastName" required>
                                                                <label for="floatingInput">Last Name</label>
                                                                <div class="invalid-feedback">Last name is required.</div>
                                                            </div>


                                                            <div class="form-floating mb-4">
                                                                <input type="number" class="form-control" name="Age" id="Age" placeholder="Age" required min="18" max="100">
                                                                <label for="floatingInput">Age</label>
                                                                <div class="invalid-feedback">Age must be between 18 and 100.</div>
                                                            </div>
                                                            <div class="form-floating mb-4">
                                                                        <input type="file" class="form-control" accept="image/*" name="profileImage" id="profileImage" placeholder="Image">
                                                                <label for="profileImage">Profile Image</label>
                                                                    <img id="profileImagePreview-@item.Id" src="#" alt="Profile Image" style="width: 70px; height: 70px; display: none;" />

                                                            </div>

                                                            <div class="form-floating mb-4">
                                                                <input type="date" class="form-control" name="DateOfBirth" id="DateOfBirth" placeholder="Date of Birth" required>
                                                                <label for="floatingInput">DateOfBirth</label>
                                                                <div class="invalid-feedback">Date of birth is required.</div>
                                                            </div>

                                                            <div class="form-floating mb-4">
                                                                <input type="text" class="form-control" name="Gender" id="Gender" placeholder="Gender" required>
                                                                <label for="floatingInput">Gender</label>
                                                                <div class="invalid-feedback">Gender is required.</div>
                                                            </div>


                                                            <div class="form-floating mb-4">
                                                                <input type="password" class="form-control" name="Password" id="Password" placeholder="Password" required minlength="6">
                                                                <label for="floatingInput">Password</label>
                                                                <div class="invalid-feedback">Password is required and must be at least 6 characters.</div>
                                                            </div>


                                                            <div class="form-floating mb-4">
                                                                <input type="email"
                                                                       class="form-control"
                                                                       id="emailInput"
                                                                       name="Email"
                                                                       placeholder="Email"
                                                                       required>
                                                                <label for="emailInput">Email</label>
                                                                <div class="invalid-feedback" id="emailFeedback" style="display: none;">A valid email is required.</div>
                                                            </div>

                                                            <button type="submit" class="btn btn-primary py-3 w-100 mb-4">
                                                                Submit
                                                            </button>
                                                        </div>
                                                    </form>

                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!--Delete Functionality-->
                                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal-@item.Id">
                                        <i class="bi bi-trash"></i>
                                    </button>

                                    <div class="modal fade" id="deleteModal-@item.Id" tabindex="-1" aria-labelledby="deleteModalLabel-@item.Id" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h1 class="modal-title fs-5" id="deleteModalLabel-@item.Id">Confirm Delete</h1>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    Are you sure you want to delete the user <strong>@item.FirstName @item.LastName</strong>?
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                                    <form asp-action="Del" asp-controller="User" method="post">
                                                        <input type="hidden" name="Id" value="@item.Id" />
                                                        <button type="submit" class="btn btn-primary">Yes, Delete</button>
                                                    </form>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    </div>
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>
                </div>
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-between align-items-center">

        <span class="text-muted">
            Showing <strong> @ViewBag.Users.Count</strong> of  <strong>@ViewBag.TotalCount</strong> records
        </span>
        <ul class="pagination mb-0">
            @for (int i = 1; i <= ViewBag.TotalPages; i++)
            {
                <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")" >
                    <a class="page-link"  href="@Url.Action("AddUser", new { page = i, pageSize = ViewBag.PageSize, searchQuery = ViewBag.SearchQuery })">@i</a>
                </li>
            }
        </ul>
    </div>
</div>
<script>
    document.getElementById('searchBox').addEventListener('keypress', function (event) {
        if (event.key === 'Enter') {
            document.getElementById('searchForm').submit(); // Submit the form on Enter key press
        }
    });

    document.querySelector('button[type="submit"]').addEventListener('click', function () {
        document.getElementById('searchForm').submit(); // Submit the form on button click
    });
</script>
<script>


    document.getElementById('btnFine').addEventListener('click', function () {
        const spinner = document.getElementById('spinner');

        // Debug log to check spinner element
        console.log('Spinner element:', spinner);

        // Show spinner
        spinner.classList.remove('d-none');
        spinner.classList.add('show');

        fetch('/User/SendFine', {
            method: 'POST',
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Data:', data);
                showToast(data.message);
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while sending reminders.'); // Show error message
            })
            .finally(() => {
                // Hide spinner
                spinner.classList.add('d-none');
                spinner.classList.remove('show');
            });
    });

    function showToast(message) {
        const toastContainer = document.getElementById('toastContainer');
        const toast = document.createElement('div');
        toast.className = 'toast align-items-center text-bg-primary border-0';
        toast.role = 'alert';
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');
        toast.innerHTML = `
                <div class="d-flex" style="background-color: lightblue;">
                    <div class="toast-body">Mails Sent successfully ! </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
        toastContainer.appendChild(toast);

        const bootstrapToast = new bootstrap.Toast(toast);
        bootstrapToast.show();

        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }

</script>
<script>


    document.getElementById('btnRemainder').addEventListener('click', function () {
        const spinner = document.getElementById('spinner');

        // Debug log to check spinner element
        console.log('Spinner element:', spinner);

        // Show spinner
        spinner.classList.remove('d-none');
        spinner.classList.add('show');

        fetch('/User/SendRemainders', {
            method: 'POST',
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Data:', data);
                showToast(data.message); // Show success message
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while sending reminders.'); // Show error message
            })
            .finally(() => {
                // Hide spinner
                spinner.classList.add('d-none');
                spinner.classList.remove('show');
            });
    });

    function showToast(message) {
        const toastContainer = document.getElementById('toastContainer');
        const toast = document.createElement('div');
        toast.className = 'toast align-items-center text-bg-primary border-0';
        toast.role = 'alert';
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');
        toast.innerHTML = `
                    <div class="d-flex" style="background-color: lightblue;">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                `;
        toastContainer.appendChild(toast);

        const bootstrapToast = new bootstrap.Toast(toast);
        bootstrapToast.show();

        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }

</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var toastElList = [].slice.call(document.querySelectorAll('.toast'));
        var toastList = toastElList.map(function (toastEl) {
            return new bootstrap.Toast(toastEl);
        });

        // Show the toast programmatically
        toastList.forEach(toast => toast.show());
    });
</script>

<script>
    function setUsersId(userId) {
        // Make an AJAX request to fetch user data by ID
        $.ajax({
            url: '/User/GetUserDetails',
            type: 'GET',
            data: { id: userId },
            success: function (data) {
                const modal = $('#exampleModal-' + userId);

                // Bind input fields
                modal.find('input[name="FirstName"]').val(data.firstName);
                modal.find('input[name="LastName"]').val(data.lastName);
                modal.find('input[name="Age"]').val(data.age);
                modal.find('input[name="DateOfBirth"]').val(data.dateOfBirth);
                modal.find('input[name="Gender"]').val(data.gender);
                modal.find('input[name="Password"]').val(data.password);
                modal.find('input[name="Email"]').val(data.email);

                // Bind image to the preview element
                const imagePreview = modal.find('#profileImagePreview-' + userId);
                if (data.profileImage) {
                    imagePreview.attr('src', data.profileImage).show();
                } else {
                    imagePreview.hide();
                }
            },
            error: function (xhr, status, error) {
                console.error('Error fetching user details:', error);
                alert('Failed to fetch user details.');
            }
        });
    }
</script>
